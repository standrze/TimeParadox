// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package paradox

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ParadoxClient is the client API for Paradox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParadoxClient interface {
	HelloWorld(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type paradoxClient struct {
	cc grpc.ClientConnInterface
}

func NewParadoxClient(cc grpc.ClientConnInterface) ParadoxClient {
	return &paradoxClient{cc}
}

func (c *paradoxClient) HelloWorld(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/paradox.Paradox/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParadoxServer is the server API for Paradox service.
// All implementations must embed UnimplementedParadoxServer
// for forward compatibility
type ParadoxServer interface {
	HelloWorld(context.Context, *Request) (*Reply, error)
	mustEmbedUnimplementedParadoxServer()
}

// UnimplementedParadoxServer must be embedded to have forward compatible implementations.
type UnimplementedParadoxServer struct {
}

func (UnimplementedParadoxServer) HelloWorld(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedParadoxServer) mustEmbedUnimplementedParadoxServer() {}

// UnsafeParadoxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParadoxServer will
// result in compilation errors.
type UnsafeParadoxServer interface {
	mustEmbedUnimplementedParadoxServer()
}

func RegisterParadoxServer(s grpc.ServiceRegistrar, srv ParadoxServer) {
	s.RegisterService(&_Paradox_serviceDesc, srv)
}

func _Paradox_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParadoxServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paradox.Paradox/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParadoxServer).HelloWorld(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Paradox_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paradox.Paradox",
	HandlerType: (*ParadoxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _Paradox_HelloWorld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paradox.proto",
}
